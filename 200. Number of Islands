// Author : Saroj Mallick
// Linkedin : https://www.linkedin.com/in/saroj-mallick-00800412b/
// mailto: sarojku.17@gmail.com

// Link : https://leetcode.com/problems/number-of-islands/
// Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water),
// return the number of islands.An island is surrounded by water and is formed by connecting adjacent 
// lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

// Idea : Here I have used BFS to visit the neighbouring nodes .I color the nodes dpending on the new island count.
 



class Solution {
    int cnt=0;
    int m=0,n=0;
    public:
    void dfs(vector<vector<int>>& check,int i,int j){
        
    
            if((i+1<n&&j<m)&&check[i+1][j]==1)
            {
                check[i+1][j]=cnt+1;
                dfs(check,i+1,j);
            }
            if((i<n&&j+1<m)&&check[i][j+1]==1)
            {
                check[i][j+1]=cnt+1;
                dfs(check,i,j+1);
            }
            if((i-1>=0&&j<m)&&check[i-1][j]==1)
            {
                check[i-1][j]=cnt+1;
                dfs(check,i-1,j);
            }
           if((i<n&&j-1>=0)&&check[i][j-1]==1)
            {
                check[i][j-1]=cnt+1;
                dfs(check,i,j-1);
            }
    }
    int numIslands(vector<vector<char>>& g) {
        n=g.size();
        if(n==0)
            return 0;
        m=g[0].size();
        vector<vector<int> > check(n,vector<int>(m,0));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
                if(g[i][j]=='1')
                    check[i][j]=1;
        }

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
                if(check[i][j]==1)
                {
                    cnt++;
                    check[i][j]=cnt+1;
                    dfs(check,i,j);
                }
        }
        
        return cnt;
        
    }
};



//Idea2: In the second solution i have used union-find data structure to group islands . To improve the efficiency i haved used size to balance tress and path compression while 
//finding the root.



class Solution {
    map<pair<int,int>,pair<int,int> >b;
    map<pair<int,int>,int> sz;
    public:
    
    pair<int,int> root(pair<int,int> p)
    {
        while(b[b[p]]!=p)
        {
            b[p]=b[b[p]];
            p=b[p];
        }
        return p;
    }
    void unionR(pair<int,int> p1,pair<int,int> p2)
    {
        pair<int,int> r1=root(p1);
        pair<int,int> r2=root(p2);
        if(r1==r2)
            return;
        else
        {
            if(sz[r1]>sz[r2])
            {
                b[r2]=r1;
                sz[r2]+=sz[r1];
            }
            else
            {
                b[r1]=r2;
                sz[r1]+=sz[r2];
            }
                
        }
            
    }
    int numIslands(vector<vector<char>>& g) {

        int n=g.size();
        int m=g[0].size();
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
                if(g[i][j]=='1')
                {
                    b[{i,j}]={i,j};
                    sz[{i,j}]=1;
                }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(g[i][j]=='1')
                {
                    if(i+1<n&&g[i+1][j]=='1')
                        unionR({i,j},{i+1,j});
                    if(j+1<m&&g[i][j+1]=='1')
                        unionR({i,j},{i,j+1});
                    if(i-1>=0&&g[i-1][j]=='1')
                        unionR({i,j},{i-1,j});
                    if(j-1>=0&&g[i][j-1]=='1')
                        unionR({i,j},{i,j-1});                    
                }        
                   
            }
        }
        int cnt=0;
        for(auto it:b)
        {
            pair<int,int> k=it.first;
            pair<int,int> v=it.second;
            if(k.first==v.first&&k.second==v.second)
                cnt++;
        }
        return cnt;
        
    }
};
